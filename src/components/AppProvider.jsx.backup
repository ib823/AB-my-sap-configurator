import React, { useState, useContext, createContext, useCallback, useMemo } from "react";

const AppContext = createContext(undefined);

export const useApp = () => {
  const context = useContext(AppContext);
  if (!context) throw new Error("useApp must be used within SAPAppProvider");
  return context;
};

export const SAPAppProvider = ({ children }) => {
  const [state, setState] = useState({
    packages: [
      {
        id: "pkg1",
        name: "Financial Master Data",
        category: "Finance",
        description: "Core financial setup",
        total_effort_pd: 193,
        sgd_price: 135000,
        layer: "core",
        icon: "ðŸ’°",
        malaysia_verified: true,
        critical_path: true,
        selected: false
      }
    ],
    malaysiaForms: [
      { id: "f1", form_name: "EA Form", category: "Payroll", mandatory: true, effort_pd: 8, description: "Tax", selected: false }
    ],
    projectServices: [
      { id: "s1", service_name: "Project Management", category: "PM", effort_pd: 120, description: "PM", selected: false }
    ],
    clientProfile: { company_name: "", industry: "", company_size: "", system_landscape: "", client_maturity: "", legal_entities: 1 },
    selectedView: "packages",
    integrations: [],
    floatingCardMinimized: false,
    searchQuery: "",
    filters: {}
  });

  const value = {
    state,
    updatePackage: (id, updates) => setState(prev => ({
      ...prev,
      packages: prev.packages.map(p => p.id === id ? { ...p, ...updates } : p)
    })),
    updateClientProfile: (updates) => setState(prev => ({
      ...prev,
      clientProfile: { ...prev.clientProfile, ...updates }
    })),
    validatePrerequisites: () => ({ valid: true, missing: [], warnings: [] }),
    calculateTotalEffort: () => state.packages.filter(p => p.selected).reduce((s, p) => s + p.total_effort_pd, 0),
    getSelectedPackages: () => state.packages.filter(p => p.selected),
    generateRiskAssessment: () => ({ risks: [], overall_risk: "LOW" }),
    calculateComplexityMultiplier: () => 1.0,
    setSelectedView: (view) => setState(prev => ({ ...prev, selectedView: view })),
    toggleForm: (id) => setState(prev => ({
      ...prev,
      malaysiaForms: prev.malaysiaForms.map(f => f.id === id ? { ...f, selected: !f.selected } : f)
    })),
    toggleService: (id) => setState(prev => ({
      ...prev,
      projectServices: prev.projectServices.map(s => s.id === id ? { ...s, selected: !s.selected } : s)
    })),
    addIntegration: () => {},
    removeIntegration: () => {},
    setFloatingCardMinimized: (m) => setState(prev => ({ ...prev, floatingCardMinimized: m })),
    setSearchQuery: (q) => setState(prev => ({ ...prev, searchQuery: q })),
    setFilters: (f) => setState(prev => ({ ...prev, filters: f })),
    exportToSOW: () => console.log("Export"),
    optimizeBundles: () => console.log("Optimize")
  };

  return React.createElement(AppContext.Provider, { value }, children);
};
export default AppProvider;
