import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

export class RealExcelExporter {
  static generateExcel(packages, totals, clientProfile, timeline, resources) {
    const wb = XLSX.utils.book_new();
    
    // Summary Sheet
    const summaryData = [
      ['SAP Implementation Configuration Report'],
      [''],
      ['Client Information'],
      ['Company Name', clientProfile.company_name || 'Not Specified'],
      ['Industry', clientProfile.industry],
      ['Company Size', clientProfile.company_size],
      ['System Landscape', clientProfile.system_landscape],
      [''],
      ['Project Summary'],
      ['Total Packages', totals.packageCount],
      ['Total Modules', totals.moduleCount],
      ['Total Effort (PD)', totals.effort.toFixed(1)],
      ['Total Cost (SGD)', totals.cost],
      ['Estimated Duration', `${Math.ceil(totals.effort / 20)} months`],
      [''],
      ['Generated On', new Date().toLocaleString()],
      ['Generated By', 'ABeam Consulting SAP Configurator']
    ];
    
    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
    
    // Style the summary sheet
    summarySheet['!cols'] = [{ wch: 30 }, { wch: 40 }];
    summarySheet['A1'].s = { font: { bold: true, sz: 16 } };
    summarySheet['A3'].s = { font: { bold: true, sz: 14 } };
    summarySheet['A9'].s = { font: { bold: true, sz: 14 } };
    
    // Packages Sheet
    const packageHeaders = ['Package Name', 'Category', 'Type', 'Layer', 'Effort (PD)', 'Cost (SGD)', 'Status', 'Critical Path', 'Malaysia Verified'];
    const packageData = packages
      .filter(p => p.selected || p.modules.some(m => m.selected))
      .map(p => [
        p.name,
        p.category,
        p.type,
        p.layer,
        p.selected ? p.total_effort_pd : p.modules.filter(m => m.selected).reduce((sum, m) => sum + m.effort_pd, 0),
        p.selected ? p.sgd_price : Math.round(p.sgd_price * p.modules.filter(m => m.selected).length / p.modules.length),
        p.selected ? 'Full Package' : 'Partial',
        p.critical_path ? 'Yes' : 'No',
        p.malaysia_verified ? 'Yes' : 'No'
      ]);
    
    const packagesSheet = XLSX.utils.aoa_to_sheet([packageHeaders, ...packageData]);
    packagesSheet['!cols'] = Array(9).fill({ wch: 20 });
    
    // Modules Sheet
    const moduleHeaders = ['Package', 'Module Name', 'Description', 'Effort (PD)', 'Selected', 'Prerequisites'];
    const moduleData = [];
    
    packages.forEach(pkg => {
      if (pkg.selected || pkg.modules.some(m => m.selected)) {
        pkg.modules.forEach(mod => {
          if (mod.selected || pkg.selected) {
            moduleData.push([
              pkg.name,
              mod.name,
              mod.description,
              mod.effort_pd,
              mod.selected || pkg.selected ? 'Yes' : 'No',
              mod.prerequisites.join(', ') || 'None'
            ]);
          }
        });
      }
    });
    
    const modulesSheet = XLSX.utils.aoa_to_sheet([moduleHeaders, ...moduleData]);
    modulesSheet['!cols'] = Array(6).fill({ wch: 25 });
    
    // Timeline Sheet
    const timelineHeaders = ['Phase', 'Duration (Months)', 'Start Month', 'End Month', 'Effort (PD)', 'Resources Required'];
    const timelineData = timeline?.map(phase => [
      phase.name,
      phase.duration,
      phase.startMonth + 1,
      phase.endMonth,
      phase.effort || 0,
      phase.resources || 0
    ]) || [];
    
    const timelineSheet = XLSX.utils.aoa_to_sheet([timelineHeaders, ...timelineData]);
    timelineSheet['!cols'] = Array(6).fill({ wch: 20 });
    
    // Resources Sheet
    const resourceHeaders = ['Name', 'Role', 'Level', 'Allocation %', 'Daily Rate (SGD)', 'Monthly Cost'];
    const resourceData = resources?.map(r => [
      r.name,
      r.role,
      r.level,
      r.allocation,
      r.rate,
      (r.rate * r.allocation / 100 * 20).toFixed(0)
    ]) || [];
    
    const resourcesSheet = XLSX.utils.aoa_to_sheet([resourceHeaders, ...resourceData]);
    resourcesSheet['!cols'] = Array(6).fill({ wch: 20 });
    
    // Budget Sheet
    const budgetData = [
      ['Budget Breakdown'],
      [''],
      ['Cost Category', 'Amount (SGD)', 'Percentage'],
      ['Software Licensing', totals.cost, '40%'],
      ['Implementation Services', totals.cost * 1.5, '60%'],
      ['Infrastructure', totals.cost * 0.15, '6%'],
      ['Training', totals.cost * 0.05, '2%'],
      ['Contingency', totals.cost * 0.15, '6%'],
      [''],
      ['Total Project Cost', (totals.cost * 2.85).toFixed(0), '100%'],
      [''],
      ['Annual Support (20%)', (totals.cost * 0.20).toFixed(0), '-'],
      ['3-Year TCO', (totals.cost * 2.85 + totals.cost * 0.20 * 3).toFixed(0), '-']
    ];
    
    const budgetSheet = XLSX.utils.aoa_to_sheet(budgetData);
    budgetSheet['!cols'] = [{ wch: 30 }, { wch: 20 }, { wch: 15 }];
    
    // Add all sheets to workbook
    XLSX.utils.book_append_sheet(wb, summarySheet, 'Summary');
    XLSX.utils.book_append_sheet(wb, packagesSheet, 'Packages');
    XLSX.utils.book_append_sheet(wb, modulesSheet, 'Modules');
    XLSX.utils.book_append_sheet(wb, timelineSheet, 'Timeline');
    XLSX.utils.book_append_sheet(wb, resourcesSheet, 'Resources');
    XLSX.utils.book_append_sheet(wb, budgetSheet, 'Budget');
    
    // Generate Excel file
    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([wbout], { type: 'application/octet-stream' });
    saveAs(blob, `SAP_Config_${clientProfile.company_name || 'Report'}_${new Date().toISOString().split('T')[0]}.xlsx`);
  }
}

export default RealExcelExporter;
